---
export interface Props {
  title: string;
}

import { NeoThemeProvider } from "@avaya/neo-react";

import { SiteHeader, SiteFooter, DynamicTheme } from "components";

import LeftPanel from "./LeftPanel.astro";

import type { PageAstroInstance } from "helpers/types";

import "@avaya/neo-react/avaya-neo-react.css";

const userAgentString = Astro.request.headers.get("user-agent");

const userAgent = userAgentString?.toLowerCase().includes("mac")
  ? "macos"
  : "windows";

const { title } = Astro.props as Props;

const { pathname } = Astro.url;

const pages = (await Astro.glob<PageAstroInstance>("../**/*.astro"))
  .filter((page) => page.title)
  .map(({ title, keywords, ...rest }) => ({
    ...rest,
    title,
    keywords,
  }));

let leftNavPages: PageAstroInstance[] = [];
switch (pathname.split("/")[1]) {
  case "components":
    leftNavPages = pages.filter((page) => page.url?.includes("components"));
    break;

  case "docs":
    leftNavPages = pages.filter((page) => page.url?.includes("docs"));
    break;

  default:
    break;
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />

    <script async src="https://rum.cronitor.io/script.js"></script>
    <script>
      window.cronitor =
        window.cronitor ||
        function () {
          (window.cronitor.q = window.cronitor.q || []).push(arguments);
        };
      // eslint-disable-next-line no-undef
      cronitor("config", { clientKey: "7a4551f7269f527ea46053a3f21302fa" });
    </script>

    <title>Test Two</title>
  </head>

  <body id="body-content-wrapper">
    <NeoThemeProvider initialMode="dynamic">
      <SiteHeader
        pathname={pathname}
        pages={pages}
        userAgent={userAgent}
        showToggleBtn={leftNavPages.length > 0}
        client:load
      />
      <div class="main__wrapper">
        <LeftPanel pages={leftNavPages} />
        {
          pathname.endsWith("icons") ? (
            <DynamicTheme client:only="react">
              <main id="main-content">
                <slot />
              </main>
            </DynamicTheme>
          ) : (
            <main id="main-content">
              <slot />
            </main>
          )
        }
      </div>

      <SiteFooter />
    </NeoThemeProvider>

    <style is:global>
      :root {
        --header-height: 58px;
        --footer-height: 58px;

        /*
        --mobile-small-max-breakpoint: 671px;
        --mobile-max-breakpoint: 799px;
        --tablet-max-breakpoint: 1279px;
        */
      }

      body {
        font-size: 1rem;
        color: var(--global-font-color);
      }

      .main__theme__styles {
        width: 100%;
        color: var(--global-font-color);
        background-color: var(--global-background);
      }

      /* mobile */
      @media screen and (max-width: 799px) {
        :root {
          --header-height: 48px;
          --footer-height: 48px;
        }
      }

      a {
        text-decoration: none;
      }

      ul.dash-list {
        list-style-type: "- ";
        line-height: 28px;
      }

      /* HACK: force left align until fix is made in neo-css lib (`_tooltip.scss` line 37) */
      .neo-tooltip__content {
        text-align: left;
      }
    </style>

    <style>
      body {
        margin: 0;
      }

      body main {
        /* plus `1px` for border */
        --body-main-margin-top: 3rem;
        --body-main-height: calc(
          100vh - var(--header-height) - var(--footer-height) -
            var(--body-main-margin-top) - 1px
        );

        min-height: var(--body-main-height);
        max-width: 60rem;
        padding: 0 1rem 2rem 1rem;
        margin: auto;
        margin-top: var(--body-main-margin-top);
      }

      .main__wrapper {
        display: flex;
      }

      @media screen and (max-width: 1279px) {
        body main {
          /*
            `LeftNavigationStyleOverride.css` adds `margin-bottom: 3rem;` at `@media (max-width: 1279px)`
          */
          --body-main-height: calc(
            100vh - var(--header-height) - var(--footer-height) -
              var(--body-main-margin-top) - 3rem - 1px
          );
        }
      }
      @media screen and (max-width: 799px) {
        body main {
          /*
            NOTE: the footer and header both expand into a grid format, so we _do_ want the `var`s
            to remain as they are, thus why we need this "special/tribal knowledge" implementation
          */
          --body-main-height: calc(
            100vh - var(--header-height) - (var(--footer-height) * 3) -
              (var(--body-main-margin-top) * 2) - 1px
          );
        }

        .main__wrapper {
          display: block;
          position: relative;
          overflow-x: hidden;
        }
      }
    </style>
  </body>
</html>
