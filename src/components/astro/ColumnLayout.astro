---
import clsx from "clsx";
export interface Props {
	bkgColor?: string;
	gap?: string;
	isShaded?: boolean;
	marginBottom?: string;
	marginTop?: string;
	numOfColumns: 1 | 2 | 3 | 4;
	showGridlines?: boolean;
	showTopBorder?: boolean;
	showRightBorder?: boolean;
	isRounded?: boolean;
}

const {
	bkgColor = "transparent",
	gap = "0",
	isShaded = false,
	marginTop = "3rem",
	marginBottom = "1.5rem",
	numOfColumns = 1,
	showGridlines = true,
	showTopBorder = true,
	showRightBorder = false,
	isRounded = true,
} = Astro.props as Props;

const borderPatternClass = clsx(
	"variable-grid-columns",
	showGridlines && `gridlines-enabled grid-borders-${numOfColumns}-columns`,
	showRightBorder && "right-border",
	!showTopBorder && "no-top-border",
	isShaded && "column-layout--shaded",
	!isRounded && "no-border-radius",
);
---

<div class={borderPatternClass}>
  <slot />
</div>

<style define:vars={{ marginTop, marginBottom, numOfColumns, gap, bkgColor }}>
  .variable-grid-columns {
    display: grid;
    gap: var(--gap);
    grid-template-columns: repeat(var(--numOfColumns), 1fr);
    background-color: var(--bkgColor);
    margin-top: var(--marginTop);
    margin-bottom: var(--marginBottom);
  }

  /* Children border logic starts below */
  .gridlines-enabled :global(div) {
    border: 1px solid var(--neo-color-base-200);
    border-right: none;
  }

  .right-border :global(div:nth-child(n)) {
    border-right: 1px solid var(--neo-color-base-200);
  }

  .grid-borders-1-columns :global(div:nth-child(n + 2)) {
    border-top: none;
  }
  .grid-borders-1-columns :global(div:nth-child(n)) {
    border-right: 1px solid var(--neo-color-base-200);
  }

  .grid-borders-2-columns :global(div:nth-child(n + 3)) {
    border-top: none;
  }
  .grid-borders-2-columns :global(div:nth-child(2n)) {
    border-right: 1px solid var(--neo-color-base-200);
  }

  .grid-borders-3-columns :global(div:nth-child(n + 4)) {
    border-top: none;
  }

  .grid-borders-3-columns :global(div:nth-child(3n)) {
    border-right: 1px solid var(--neo-color-base-200);
  }

  .grid-borders-4-columns :global(div:nth-child(n + 5)) {
    border-top: none;
  }

  .grid-borders-4-columns :global(div:nth-child(4n)) {
    border-right: 1px solid var(--neo-color-base-200);
  }

  .no-top-border :global(div:nth-child(n)) {
    border-top: none;
  }

  div.column-layout--shaded {
    background-color: var(--neo-color-base-100);
  }

  .no-border-radius :global(.neo-img) {
    border-radius: 0;
  }
</style>
